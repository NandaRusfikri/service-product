// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceProductHandlerClient is the client API for ServiceProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProductHandlerClient interface {
	GetProductByIdRPC(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*EntityProtoProduct, error)
	ListProductRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseEntityProductList, error)
	CreateProductRPC(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*EntityProtoProduct, error)
	UpdateProductRPC(ctx context.Context, in *EntityProtoProduct, opts ...grpc.CallOption) (*EntityProtoProduct, error)
	DeleteProductRPC(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceProductHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProductHandlerClient(cc grpc.ClientConnInterface) ServiceProductHandlerClient {
	return &serviceProductHandlerClient{cc}
}

func (c *serviceProductHandlerClient) GetProductByIdRPC(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*EntityProtoProduct, error) {
	out := new(EntityProtoProduct)
	err := c.cc.Invoke(ctx, "/models.ServiceProductHandler/GetProductByIdRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductHandlerClient) ListProductRPC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseEntityProductList, error) {
	out := new(ResponseEntityProductList)
	err := c.cc.Invoke(ctx, "/models.ServiceProductHandler/ListProductRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductHandlerClient) CreateProductRPC(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*EntityProtoProduct, error) {
	out := new(EntityProtoProduct)
	err := c.cc.Invoke(ctx, "/models.ServiceProductHandler/CreateProductRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductHandlerClient) UpdateProductRPC(ctx context.Context, in *EntityProtoProduct, opts ...grpc.CallOption) (*EntityProtoProduct, error) {
	out := new(EntityProtoProduct)
	err := c.cc.Invoke(ctx, "/models.ServiceProductHandler/UpdateProductRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductHandlerClient) DeleteProductRPC(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/models.ServiceProductHandler/DeleteProductRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProductHandlerServer is the server API for ServiceProductHandler service.
// All implementations must embed UnimplementedServiceProductHandlerServer
// for forward compatibility
type ServiceProductHandlerServer interface {
	GetProductByIdRPC(context.Context, *ProductByIdRequest) (*EntityProtoProduct, error)
	ListProductRPC(context.Context, *emptypb.Empty) (*ResponseEntityProductList, error)
	CreateProductRPC(context.Context, *CreateProductRequest) (*EntityProtoProduct, error)
	UpdateProductRPC(context.Context, *EntityProtoProduct) (*EntityProtoProduct, error)
	DeleteProductRPC(context.Context, *ProductByIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceProductHandlerServer()
}

// UnimplementedServiceProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProductHandlerServer struct {
}

func (UnimplementedServiceProductHandlerServer) GetProductByIdRPC(context.Context, *ProductByIdRequest) (*EntityProtoProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByIdRPC not implemented")
}
func (UnimplementedServiceProductHandlerServer) ListProductRPC(context.Context, *emptypb.Empty) (*ResponseEntityProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductRPC not implemented")
}
func (UnimplementedServiceProductHandlerServer) CreateProductRPC(context.Context, *CreateProductRequest) (*EntityProtoProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductRPC not implemented")
}
func (UnimplementedServiceProductHandlerServer) UpdateProductRPC(context.Context, *EntityProtoProduct) (*EntityProtoProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductRPC not implemented")
}
func (UnimplementedServiceProductHandlerServer) DeleteProductRPC(context.Context, *ProductByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductRPC not implemented")
}
func (UnimplementedServiceProductHandlerServer) mustEmbedUnimplementedServiceProductHandlerServer() {}

// UnsafeServiceProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProductHandlerServer will
// result in compilation errors.
type UnsafeServiceProductHandlerServer interface {
	mustEmbedUnimplementedServiceProductHandlerServer()
}

func RegisterServiceProductHandlerServer(s grpc.ServiceRegistrar, srv ServiceProductHandlerServer) {
	s.RegisterService(&ServiceProductHandler_ServiceDesc, srv)
}

func _ServiceProductHandler_GetProductByIdRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductHandlerServer).GetProductByIdRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ServiceProductHandler/GetProductByIdRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductHandlerServer).GetProductByIdRPC(ctx, req.(*ProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductHandler_ListProductRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductHandlerServer).ListProductRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ServiceProductHandler/ListProductRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductHandlerServer).ListProductRPC(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductHandler_CreateProductRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductHandlerServer).CreateProductRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ServiceProductHandler/CreateProductRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductHandlerServer).CreateProductRPC(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductHandler_UpdateProductRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityProtoProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductHandlerServer).UpdateProductRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ServiceProductHandler/UpdateProductRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductHandlerServer).UpdateProductRPC(ctx, req.(*EntityProtoProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductHandler_DeleteProductRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductHandlerServer).DeleteProductRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ServiceProductHandler/DeleteProductRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductHandlerServer).DeleteProductRPC(ctx, req.(*ProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProductHandler_ServiceDesc is the grpc.ServiceDesc for ServiceProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.ServiceProductHandler",
	HandlerType: (*ServiceProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductByIdRPC",
			Handler:    _ServiceProductHandler_GetProductByIdRPC_Handler,
		},
		{
			MethodName: "ListProductRPC",
			Handler:    _ServiceProductHandler_ListProductRPC_Handler,
		},
		{
			MethodName: "CreateProductRPC",
			Handler:    _ServiceProductHandler_CreateProductRPC_Handler,
		},
		{
			MethodName: "UpdateProductRPC",
			Handler:    _ServiceProductHandler_UpdateProductRPC_Handler,
		},
		{
			MethodName: "DeleteProductRPC",
			Handler:    _ServiceProductHandler_DeleteProductRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product/product.proto",
}
